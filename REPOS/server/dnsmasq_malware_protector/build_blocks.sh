#!/bin/sh

# Base directory for temporary files
TMP_LOCATION=/tmp
DNSMASQ_CONF_DIR=/etc/dnsmasq.d
build_host_files()
{

# List of URLs to download hosts files
HOSTS_LIST="
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/hostsVN/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/alternates/porn-social/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/adaway.org/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/add.2o7Net/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/add.Risk/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/add.Spam/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/add.Dead/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/KADhosts/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/mvps.org/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/someonewhocares.org/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/UncheckyAds/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/yoyo.org/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/Badd-Boyz-Hosts/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/URLHaus/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/StevenBlack/hosts
https://raw.githubusercontent.com/StevenBlack/hosts/refs/heads/master/data/tiuxo/hosts
"

# Download each hosts file and create corresponding dnsmasq configuration
for HOSTS_RAW in $HOSTS_LIST; do
  # Extract the filename from the URL
  FILENAME=$(basename $HOSTS_RAW)
  #echo "Filename "$FILENAME
  # Extract the unique identifier (e.g., mvps.org) from the URL
  #IDENTIFIER=$(echo $HOSTS_RAW | grep -oP '(?<=data/)[^/]+')
  IDENTIFIER=$(echo "$HOSTS_RAW" | grep -oP '(?<=data/|alternates/)[^/]+')
  #echo echo "Identifier "$IDENTIFIER
  # Temporary file for the downloaded hosts
  TMP_FILE=$TMP_LOCATION/$FILENAME
  #echo echo "TMP_FILE "$TMP_FILE
  # Output dnsmasq configuration file
  CONF_FILE=$DNSMASQ_CONF_DIR/$IDENTIFIER.conf

  echo "Downloading $HOSTS_RAW..."
  wget -q $HOSTS_RAW -O $TMP_FILE

  if [ -s $TMP_FILE ]; then
    # Generate dnsmasq configuration for IPv4
    awk '$1 == "0.0.0.0" || $1 == "127.0.0.1" { print "address=/"$2"/0.0.0.0/"}' $TMP_FILE > $CONF_FILE
    # For IPv6 support, uncomment the following line
    awk '$1 == "0.0.0.0" || $1 == "127.0.0.1" { print "address=/"$2"/::1/"}' $TMP_FILE >> $CONF_FILE

    echo "Created $CONF_FILE"
  else
    echo "Failed to download or empty file: $HOSTS_RAW"
  fi

  # Clean up temporary file
  rm -f $TMP_FILE
done
if [ -f "$DNSMASQ_CONF_DIR/.conf" ]; then
  mv -v "$DNSMASQ_CONF_DIR/.conf" "$DNSMASQ_CONF_DIR/default.conf"
fi

echo "All dnsmasq configurations updated!"
#/etc/init.d/dhcpd restart
}
build_adblock()
{
#DNSMASQ_CONF_DIR=/etc/dnsmasq.d
echo "Grabbing Adblocklist"
wget -q -nv https://easylist-downloads.adblockplus.org/easylist.txt -O /temp/adblocklist
egrep '^\|\|([a-zA-Z\.]+)\^$' /temp/adblocklist | cut -d '^' -f1 | sed 's#||#address=/# ; s#$#/0.0.0.0/#' | sort | uniq > $DNSMASQ_CONF_DIR/adblock.conf
rm /temp/adblocklist
}

easyprivacy() {
	echo "Getting EasyPrivacy list ... "
	wget -q -nv https://easylist-downloads.adblockplus.org/easyprivacy.txt -O /tmp/easyprivacy.txt
	egrep '^\|\|([a-zA-Z\.]+)(\^|\^\$third-party)$' /tmp/easyprivacy.txt | sed 's#||#address=/# ; s#\^.*#/0.0.0.0/#' | sort | uniq > $DNSMASQ_CONF_DIR/easyprivacy.conf
	rm /tmp/easyprivacy.txt
}
fanboy_cookies()
{
	echo "Grabbing Fanboy Cookies"
	wget -q -nv https://secure.fanboy.co.nz/fanboy-cookiemonster.txt -O /temp/cookies
	egrep '^\|\|([a-zA-Z\.]+)\^$' /temp/cookies | cut -d '^' -f1 | sed 's#||#address=/# ; s#$#/0.0.0.0/#' | sort | uniq > $DNSMASQ_CONF_DIR/fanboy_cookies.conf
	rm /temp/cookies

}
annoyances()
{
        echo "Grabbing Fanboy Annoyances"
        wget -q -nv https://secure.fanboy.co.nz/fanboy-annoyance.txt -O /temp/annoyances
        egrep '^\|\|([a-zA-Z\.]+)\^$' /temp/annoyances | cut -d '^' -f1 | sed 's#||#address=/# ; s#$#/0.0.0.0/#' | sort | uniq > $DNSMASQ_CONF_DIR/fanboy_annoyances.conf
        rm /temp/annoyances
}
social()
{
        echo "Grabbing Social"
        wget -q https://easylist.to/easylist/fanboy-social.txt -O /temp/social
        egrep '^\|\|([a-zA-Z\.]+)\^$' /temp/social | cut -d '^' -f1 | sed 's#||#address=/# ; s#$#/0.0.0.0/#' | sort | uniq > $DNSMASQ_CONF_DIR/fanboy_social.conf
        rm /temp/social
}
restart_dnsmasq()
{
	/etc/init.d/dhcpd restart
}
delete_certain_words()
{
    if [ -z "$1" ]; then
        echo "Error: Please provide a word to delete"
        return 1
    fi

    echo "Removing lines containing '$1' from dnsmasq configuration files..."
    for CONF_FILE in $DNSMASQ_CONF_DIR/*.conf; do
        if [ -f "$CONF_FILE" ]; then
            # Use sed to delete lines containing the word and modify file in place
            sed -i "/$1/d" "$CONF_FILE"
            echo "Processed $CONF_FILE"
        fi
    done
    echo "Completed removing lines containing '$1'"
}
loosen_up_restrictions()
{
	delete_certain_words "reddit"
	delete_certain_words "redd.it"
	delete_certain_words "google"
	
}
run_default()
{
build_host_files
build_adblock
easyprivacy
fanboy_cookies
annoyances
loosen_up_restrictions
#social
restart_dnsmasq
}
"$@"
