diff --git a/cryptol.cabal b/cryptol.cabal
index 24eb2929..e65d3ed7 100644
--- a/cryptol.cabal
+++ b/cryptol.cabal
@@ -65,7 +65,7 @@ library
                        pretty            >= 1.1,
                        process           >= 1.2,
                        random            >= 1.0.1,
-                       sbv               >= 8.6 && < 8.8,
+                       sbv               >= 8.6 && < 8.10,
                        simple-smt        >= 0.7.1,
                        stm               >= 2.4,
                        strict,
diff --git a/src/Cryptol/Backend/SBV.hs b/src/Cryptol/Backend/SBV.hs
index 6a4d8b00..50e4e087 100644
--- a/src/Cryptol/Backend/SBV.hs
+++ b/src/Cryptol/Backend/SBV.hs
@@ -6,6 +6,7 @@
 -- Stability   :  provisional
 -- Portability :  portable
 
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE DeriveFunctor #-}
 {-# LANGUAGE FlexibleInstances #-}
 {-# LANGUAGE GeneralizedNewtypeDeriving #-}
@@ -73,17 +74,24 @@ unpackSBV x = [ svTestBit x i | i <- reverse [0 .. intSizeOf x - 1] ]
 literalSWord :: Int -> Integer -> SWord SBV
 literalSWord w i = svInteger (KBounded False w) i
 
+svMkSymVar_ :: Maybe Quantifier -> Kind -> Maybe String -> SBV.State -> IO SVal
+#if MIN_VERSION_sbv(8,8,0)
+svMkSymVar_ a b c = svMkSymVar (SBV.NonQueryVar a) b c
+#else
+svMkSymVar_ a b c = svMkSymVar a b c
+#endif
+
 freshBV_ :: SBV -> Int -> IO (SWord SBV)
 freshBV_ (SBV stateVar _) w =
-  withMVar stateVar (svMkSymVar Nothing (KBounded False w) Nothing)
+  withMVar stateVar (svMkSymVar_ Nothing (KBounded False w) Nothing)
 
 freshSBool_ :: SBV -> IO (SBit SBV)
 freshSBool_ (SBV stateVar _) =
-  withMVar stateVar (svMkSymVar Nothing KBool Nothing)
+  withMVar stateVar (svMkSymVar_ Nothing KBool Nothing)
 
 freshSInteger_ :: SBV -> IO (SInteger SBV)
 freshSInteger_ (SBV stateVar _) =
-  withMVar stateVar (svMkSymVar Nothing KUnbounded Nothing)
+  withMVar stateVar (svMkSymVar_ Nothing KUnbounded Nothing)
 
 
 -- SBV Evaluation monad -------------------------------------------------------
diff --git a/src/Cryptol/Symbolic/SBV.hs b/src/Cryptol/Symbolic/SBV.hs
index 2f97100e..7421db91 100644
--- a/src/Cryptol/Symbolic/SBV.hs
+++ b/src/Cryptol/Symbolic/SBV.hs
@@ -6,6 +6,7 @@
 -- Stability   :  provisional
 -- Portability :  portable
 
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE FlexibleContexts #-}
 {-# LANGUAGE ImplicitParams #-}
 {-# LANGUAGE LambdaCase #-}
@@ -124,7 +125,11 @@ proverNames = map fst proverConfigs
 setupProver :: String -> IO (Either String ([String], SBVProverConfig))
 setupProver nm
   | nm `elem` ["any","sbv-any"] =
+#if MIN_VERSION_sbv(8,9,0)
+    do ps <- SBV.getAvailableSolvers
+#else
     do ps <- SBV.sbvAvailableSolvers
+#endif
        case ps of
          [] -> pure (Left "SBV could not find any provers")
          _ ->  let msg = "SBV found the following solvers: " ++ show (map (SBV.name . SBV.solver) ps) in
@@ -155,7 +160,11 @@ satSMTResults :: SBV.SatResult -> [SBV.SMTResult]
 satSMTResults (SBV.SatResult r) = [r]
 
 allSatSMTResults :: SBV.AllSatResult -> [SBV.SMTResult]
+#if MIN_VERSION_sbv(8,8,0)
+allSatSMTResults (SBV.AllSatResult {allSatResults = rs}) = rs
+#else
 allSatSMTResults (SBV.AllSatResult (_, _, _, rs)) = rs
+#endif
 
 thmSMTResults :: SBV.ThmResult -> [SBV.SMTResult]
 thmSMTResults (SBV.ThmResult r) = [r]
@@ -389,7 +398,11 @@ processResults ProverCommand{..} ts results =
 
        -- otherwise something is wrong
        _ -> return $ ProverError (rshow results)
+#if MIN_VERSION_sbv(8,8,0)
+              where rshow | isSat = show . (SBV.AllSatResult False False False False)
+#else
               where rshow | isSat = show .  SBV.AllSatResult . (False,False,False,)
+#endif
                           | otherwise = show . SBV.ThmResult . head
 
   where
