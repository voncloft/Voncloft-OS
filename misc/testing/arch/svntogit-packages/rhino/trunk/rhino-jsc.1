.\"                                      Hey, EMACS: -*- nroff -*-
.\" First parameter, NAME, should be all caps
.\" Second parameter, SECTION, should be 1-8, maybe w/ subsection
.\" other parameters are allowed: see man(7), man(1)
.TH RHINO-JSC 1 "February  12, 2005"
.\" Please adjust this date whenever revising the manpage.
.\"
.\" Some roff macros, for reference:
.\" .nh        disable hyphenation
.\" .hy        enable hyphenation
.\" .ad l      left justify
.\" .ad b      justify to both left and right margins
.\" .nf        disable filling
.\" .fi        enable filling
.\" .br        insert line break
.\" .sp <n>    insert n+1 empty lines
.\" for manpage-specific macros, see man(7)
.SH NAME
rhino-jsc \- invokes the rhino JavaScript compiler

.SH SYNOPSIS
.B rhino-jsc
.I [options]
.I file1.js
.I [file2.js\&.\&.\&.]

.SH DESCRIPTION
This manual page documents briefly the
.B rhino-jsc
command.
This manual page was written for the Debian distribution because the original 
program does not have a manual page. It is written according to the html documentation.
.PP
\fBrhino-jsc\fP is a start script for the rhino JavaScript compiler. The JavaScript compiler translates JavaScript source into Java class files. The resulting Java class files can then be loaded and executed at another time, providing a convenient method for transferring JavaScript, and for avoiding translation cost.
Note that the top-level functions available to the shell (such as print) are not available to compiled scripts when they are run outside the shell. 

.SH OPTIONS

.IP -extends\ \fIjava_class_name\fP
Specifies that a java class extending the Java class java_class_name should be generated from the incoming JavaScript source file. Each global function in the source file is made a method of the generated class, overriding any methods in the base class by the same name.
.IP -implements\ \fIjava_intf_name\fP
Specifies that a java class implementing the Java interface java_intf_name should be generated from the incoming JavaScript source file. Each global function in the source file is made a method of the generated class, implementing any methods in the interface by the same name.
.IP -debug,\ -g 
Specifies that debug information should be generated. May not be combined with optimization at an optLevel greater than zero.
.IP -nosource 
Does not save the source in the class file. Functions and scripts compiled this way cannot be decompiled. This option can be used to avoid distributing source or simply to save space in the resulting class file.
.IP -o\ \fIoutputFile\fP
Writes the class file to the given file (which should end in .class). The string outputFile must be a writable filename.
.IP -opt,\ -O\ \fIoptLevel\fP
Optimizes at level optLevel, which must be an integer between 0 and 9. 
.IP -package\ \fIpackageName\fP
Specifies the package to generate the class into. The string packageName must be composed of valid identifier characters optionally separated by periods.
.IP -version\ \fIversionNumber\fP
Specifies the language version to compile with. The string versionNumber must be one of 100, 110, 120, 130, or 140. See JavaScript Language Versions for more information on language versions. 

.SH EXAMPLE

Example compiling the NervousText.js applet written in JavaScript. The example is provided in the librhino-java-doc package.

$ rhino-jsc \-extends java.applet.Applet \-implements java.lang.Runnable NervousText.js 

.SH SEE ALSO
The online documentation under http://www.mozilla.org/rhino/jsc.html

.SH AUTHOR
This manual page was written by Wolfgang Baer <WBaer@gmx.de>,
for the Debian project (but may be used by others).
