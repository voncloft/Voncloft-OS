From 2f9093ed2aedc008ba6e0a0b3ba0ff1839d73ac1 Mon Sep 17 00:00:00 2001
From: Christopher Kulla <fpsunflower@users.noreply.github.com>
Date: Thu, 12 Mar 2020 13:16:19 -0700
Subject: [PATCH] Allow OSL to compile with LLVM 10.x (#1128)

---
 src/liboslexec/backendllvm.cpp |  4 ++++
 src/liboslexec/llvm_util.cpp   | 27 +++++++++++++++++++++------
 2 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/src/liboslexec/backendllvm.cpp b/src/liboslexec/backendllvm.cpp
index 263d8cab..93e091b0 100644
--- a/src/liboslexec/backendllvm.cpp
+++ b/src/liboslexec/backendllvm.cpp
@@ -368,7 +368,11 @@ BackendLLVM::addCUDAVariable(const std::string& name, int size, int alignment,
 
     ASSERT (g_var && "Unable to create GlobalVariable");
 
+#if OSL_LLVM_VERSION >= 100
+    g_var->setAlignment  (llvm::MaybeAlign(alignment));
+#else
     g_var->setAlignment  (alignment);
+#endif
     g_var->setLinkage    (llvm::GlobalValue::ExternalLinkage);
     g_var->setVisibility (llvm::GlobalValue::DefaultVisibility);
     g_var->setInitializer(constant);
diff --git a/src/liboslexec/llvm_util.cpp b/src/liboslexec/llvm_util.cpp
index 8fa915fe..dde2f1e6 100644
--- a/src/liboslexec/llvm_util.cpp
+++ b/src/liboslexec/llvm_util.cpp
@@ -1160,8 +1160,12 @@ LLVM_Util::op_return (llvm::Value *retval)
 void
 LLVM_Util::op_memset (llvm::Value *ptr, int val, int len, int align)
 {
-    builder().CreateMemSet (ptr, builder().getInt8((unsigned char)val),
-                            uint64_t(len), (unsigned)align);
+    builder().CreateMemSet (ptr, builder().getInt8((unsigned char)val), uint64_t(len),
+#if OSL_LLVM_VERSION >= 100
+        llvm::MaybeAlign(align));
+#else
+        unsigned(align));
+#endif
 }
 
 
@@ -1169,8 +1173,12 @@ LLVM_Util::op_memset (llvm::Value *ptr, int val, int len, int align)
 void
 LLVM_Util::op_memset (llvm::Value *ptr, int val, llvm::Value *len, int align)
 {
-    builder().CreateMemSet (ptr, builder().getInt8((unsigned char)val),
-                            len, (unsigned)align);
+    builder().CreateMemSet (ptr, builder().getInt8((unsigned char)val), len,
+#if OSL_LLVM_VERSION >= 100
+        llvm::MaybeAlign(align));
+#else
+        unsigned(align));
+#endif
 }
 
 
@@ -1187,7 +1195,10 @@ void
 LLVM_Util::op_memcpy (llvm::Value *dst, int dstalign,
                       llvm::Value *src, int srcalign, int len)
 {
-#if OSL_LLVM_VERSION >= 70
+#if OSL_LLVM_VERSION >= 100
+    builder().CreateMemCpy (dst, llvm::MaybeAlign(dstalign), src, llvm::MaybeAlign(srcalign),
+                            uint64_t(len));
+#elif OSL_LLVM_VERSION >= 70
     builder().CreateMemCpy (dst, (unsigned)dstalign, src, (unsigned)srcalign,
                             uint64_t(len));
 #else
@@ -1588,7 +1599,11 @@ LLVM_Util::ptx_compile_group (llvm::Module* lib_module, const std::string& name,
     llvm::raw_svector_ostream assembly_stream (assembly);
 
     // TODO: Make sure rounding modes, etc., are set correctly
-#if OSL_LLVM_VERSION >= 70
+#if OSL_LLVM_VERSION >= 100
+    target_machine->addPassesToEmitFile (mod_pm, assembly_stream,
+                                         nullptr,  // FIXME: Correct?
+                                         llvm::CGFT_AssemblyFile);
+#elif OSL_LLVM_VERSION >= 70
     target_machine->addPassesToEmitFile (mod_pm, assembly_stream,
                                          nullptr,  // FIXME: Correct?
                                          llvm::TargetMachine::CGFT_AssemblyFile);
