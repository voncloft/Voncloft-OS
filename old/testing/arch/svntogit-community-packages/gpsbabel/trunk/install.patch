From 814c4695e6789666d4416e5c06aed0858feb9791 Mon Sep 17 00:00:00 2001
From: tsteven4 <13596209+tsteven4@users.noreply.github.com>
Date: Tue, 6 Aug 2019 08:59:32 -0600
Subject: [PATCH 1/4] provide method to override file locations.

linux installs typically install the translation files
and gmapbase.html out of the tree.  These operations are now
supported, see. gui/app.pro and look for PKGDATADIR, QTTRANSLATIONDIR.
---
 gui/app.pro       | 24 ++++++++++++++++++++++++
 gui/mainwindow.cc |  7 +++++--
 gui/map.cc        |  7 +++++--
 3 files changed, 34 insertions(+), 4 deletions(-)

diff --git a/gui/app.pro b/gui/app.pro
index cb1992bc0..de283ce0c 100755
--- a/gui/app.pro
+++ b/gui/app.pro
@@ -33,6 +33,30 @@ unix {
         DEFINES += HAVE_UDEV
         PKGCONFIG += libudev
     }
+
+    # To override the installed location of gmapbase.html set PKGDATADIR.
+    # e.g. qmake PKGDATADIR=/usr/share/gpsbabel
+    !isEmpty(PKGDATADIR):DEFINES += PKGDATADIR=\\\"$$PKGDATADIR\\\"
+
+    # To override the installed location of the translation files (*.qm)
+    # set QTTRANSLATIONDIR.
+    # Common use case 1:
+    # If the translations are installed local to the package then 
+    # gpsbabel_*.qm, gpsbabelfe_*.qm and the concatenated qt_*.qm must all
+    # be in QTTRANSLATIONDIR.
+    # .e.g. qmake QTTRANSLATIONDIR=/usr/share/gpsbabel/translations
+    # Note that the package_app target will create the concatenated qt_*.qm files.
+    # The concatenated qt_*.qm files are DIFFERENT from the
+    # the Qt provided meta catalog file of the same name, the concatenated
+    # qt_*.qm files include all the necessary Qt provided module qm files.
+    # Common use case 2:
+    # If the translations are installed in the directory that contains all the
+    # original Qt provided translations, then only gpsbabel_*.qm and
+    # gpsbabelfe_*.qm need be installed alongside the original Qt provided
+    # translations (which include the meta catalogs as well as the module
+    # qm files.)
+    # .e.g. qmake QTTRANSLATIONDIR=/usr/share/qt5/translations
+    !isEmpty(QTTRANSLATIONDIR):DEFINES += QTTRANSLATIONDIR=\\\"$$QTTRANSLATIONDIR\\\"
 }
 
 UI_DIR = tmp
diff --git a/gui/mainwindow.cc b/gui/mainwindow.cc
index 80a6bbc62..17202c0c9 100644
--- a/gui/mainwindow.cc
+++ b/gui/mainwindow.cc
@@ -219,8 +219,11 @@ MainWindow::MainWindow(QWidget* parent): QMainWindow(parent)
 
   ui_.outputWindow->setReadOnly(true);
 
-  langPath_ = QApplication::applicationDirPath();
-  langPath_.append("/translations/");
+#ifdef QTTRANSLATIONDIR
+  langPath_ = QTTRANSLATIONDIR;
+#else
+  langPath_ = QApplication::applicationDirPath() + "/translations";
+#endif
 
   // Start up in the current system language.
   loadLanguage(QLocale::system().name());
diff --git a/gui/map.cc b/gui/map.cc
index 9efeb6e09..42045845a 100644
--- a/gui/map.cc
+++ b/gui/map.cc
@@ -90,13 +90,16 @@ Map::Map(QWidget* parent,
   connect(mclicker, SIGNAL(logTime(QString)), this, SLOT(logTime(QString)));
 #endif
 
+#ifdef PKGDATADIR
+  QString baseFile =  PKGDATADIR + "/gmapbase.html";
+#else
   QString baseFile =  QApplication::applicationDirPath() + "/gmapbase.html";
+#endif
   if (!QFile(baseFile).exists()) {
     QMessageBox::critical(nullptr, appName,
                           tr("Missing \"gmapbase.html\" file.  Check installation"));
   } else {
-    QString urlStr = "file:///" + baseFile;
-    this->load(QUrl(urlStr));
+    this->load(QUrl::fromLocalFile(baseFile));
   }
 
 #ifdef DEBUG_JS_GENERATION

From 217dc1e0085a0e83d65f565254476e276fc15f0d Mon Sep 17 00:00:00 2001
From: tsteven4 <13596209+tsteven4@users.noreply.github.com>
Date: Tue, 6 Aug 2019 13:49:19 -0600
Subject: [PATCH 2/4] fix error using PKGDATADIR concatenation.

---
 gui/map.cc | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gui/map.cc b/gui/map.cc
index 42045845a..661aa19a8 100644
--- a/gui/map.cc
+++ b/gui/map.cc
@@ -91,7 +91,7 @@ Map::Map(QWidget* parent,
 #endif
 
 #ifdef PKGDATADIR
-  QString baseFile =  PKGDATADIR + "/gmapbase.html";
+  QString baseFile =  PKGDATADIR  "/gmapbase.html";
 #else
   QString baseFile =  QApplication::applicationDirPath() + "/gmapbase.html";
 #endif

From c6a8e404d4cd750b0e615ea68d01e8d2cc8dd363 Mon Sep 17 00:00:00 2001
From: tsteven4 <13596209+tsteven4@users.noreply.github.com>
Date: Thu, 8 Aug 2019 12:52:37 -0600
Subject: [PATCH 3/4] use a search path for finding translation files.

We search for translation files (*.qm) in this order:
1a. Relative to the executable, specifically at
    QApplication::applicationDirPath() + "/translations".
    This works when we package the app on windows and macos.
    It also works we create a bundled app on linux,
    for example with the package target.  However, linux packagers typically
    install the translation files in another location.
 OR
1b. In PKGDATADIR/translations.  This works for linux packages that
    place the translations in PKGDATADIR/translations, e.g.
    qmake PKGDATADIR=/usr/share/gpsbabel with the translations in
    /usr/share/gpsbabel/translations.
2. In the Qt TranslationsPath.  If this is not overridden in qt.conf it
   will point to the hard-coded paths that are compiled into the Qt library.
   This hard-coded path can be found with "qmake -query QT_INSTALL_TRANSLATIONS".
   This works for linux packages that have some or all translation files
   installed in the original location they used when compiling Qt.

Further details can be found in app.pro.
---
 gui/app.pro       | 72 ++++++++++++++++++++++++++++++++---------------
 gui/mainwindow.cc | 29 ++++++++++++-------
 gui/mainwindow.h  |  1 -
 3 files changed, 69 insertions(+), 33 deletions(-)

diff --git a/gui/app.pro b/gui/app.pro
index de283ce0c..9024e16eb 100755
--- a/gui/app.pro
+++ b/gui/app.pro
@@ -34,29 +34,57 @@ unix {
         PKGCONFIG += libudev
     }
 
-    # To override the installed location of gmapbase.html set PKGDATADIR.
-    # e.g. qmake PKGDATADIR=/usr/share/gpsbabel
-    !isEmpty(PKGDATADIR):DEFINES += PKGDATADIR=\\\"$$PKGDATADIR\\\"
+    # Setting PKGDATADIR will:
+    # 1. Look for gmapbase.html in PKGDATADIR instead
+    # of in QApplication::applicationDirPath().
+    # E.g. qmake PKGDATADIR=/usr/share/gpsbabel
+    # will use /usr/share/gpsbabel/gmapbase.html instead of
+    # QApplication::applicationDirPath() + "/gmapbase.html".
+    # 2. Substitude PKGDATADIR/translations in the search path for
+    # translation files instead of
+    # QApplication::applicationDirPath() + "/translations".
+    # E.g. qmake PKGDATADIR=/usr/share/gpsbabel
+    # will look in /usr/share/gpsbabel/translations instead of
+    # QApplication::applicationDirPath() + "/translations".
+
+    # We search for translation files (*.qm) in this order:
+    # 1a. Relative to the executable, specifically at
+    # QApplication::applicationDirPath() + "/translations".
+    # This works when we package the app on windows and macos.
+    # It also works we create a bundled app on linux,
+    # for example with the package target.  However, linux packagers typically
+    # install the translation files in another location.
+    #  OR
+    # 1b. In PKGDATADIR/translations.  This works for linux packages that
+    # place the translations in PKGDATADIR/translations, e.g.
+    # qmake PKGDATADIR=/usr/share/gpsbabel with the translations in
+    # /usr/share/gpsbabel/translations.
+    # 2. In the Qt TranslationsPath.  If this is not overridden in qt.conf it
+    # will point to the hard-coded paths that are compiled into the Qt library.
+    # This hard-coded path can be found with "qmake -query QT_INSTALL_TRANSLATIONS".
+    # This works for linux packages that have some or all translation files
+    # installed in the original location they used when compiling Qt.
+
+    # There are three sets of translation files that should be available
+    # when running gpsbabelfe:
+    # 1. gpsbabelfe_*.qm
+    # 2. gpsbabel_*.qm
+    # 3a. The Qt supplied meta catalogs (qt_*.qm) and the module files they
+    #     refer to (qt*_*.qm).
+    #     Note if you are counting on finding the Qt supplied translations,
+    #     then the package that provides the Qt translations
+    #     needs to be a prerequisite to the gpsbabel gui package.
+    #  OR
+    # 3b. The concatentated translation files for the modules that gpsbabelfe
+    #     uses.  These files are created by building the package target.
+    #     These are named identically to the Qt translation meta catalogs, i.e.
+    #     qt_*.qm, but contain the necessary translation data for the modules
+    #     gpsbabelfe uses.
+    # A description of the meta catalogs and concatentation process is
+    # available at
+    # https://doc.qt.io/qt-5/linguist-programmers.html#deploying-translations
 
-    # To override the installed location of the translation files (*.qm)
-    # set QTTRANSLATIONDIR.
-    # Common use case 1:
-    # If the translations are installed local to the package then 
-    # gpsbabel_*.qm, gpsbabelfe_*.qm and the concatenated qt_*.qm must all
-    # be in QTTRANSLATIONDIR.
-    # .e.g. qmake QTTRANSLATIONDIR=/usr/share/gpsbabel/translations
-    # Note that the package_app target will create the concatenated qt_*.qm files.
-    # The concatenated qt_*.qm files are DIFFERENT from the
-    # the Qt provided meta catalog file of the same name, the concatenated
-    # qt_*.qm files include all the necessary Qt provided module qm files.
-    # Common use case 2:
-    # If the translations are installed in the directory that contains all the
-    # original Qt provided translations, then only gpsbabel_*.qm and
-    # gpsbabelfe_*.qm need be installed alongside the original Qt provided
-    # translations (which include the meta catalogs as well as the module
-    # qm files.)
-    # .e.g. qmake QTTRANSLATIONDIR=/usr/share/qt5/translations
-    !isEmpty(QTTRANSLATIONDIR):DEFINES += QTTRANSLATIONDIR=\\\"$$QTTRANSLATIONDIR\\\"
+    !isEmpty(PKGDATADIR):DEFINES += PKGDATADIR=\\\"$$PKGDATADIR\\\"
 }
 
 UI_DIR = tmp
diff --git a/gui/mainwindow.cc b/gui/mainwindow.cc
index 17202c0c9..9708962ac 100644
--- a/gui/mainwindow.cc
+++ b/gui/mainwindow.cc
@@ -26,11 +26,14 @@
 #include <QtCore/QEvent>               // for QEvent (& QEvent::LanguageChange, QEvent::LocaleChange)
 #include <QtCore/QFile>                // for QFile
 #include <QtCore/QFileInfo>            // for QFileInfo
+#include <QtCore/QLibraryInfo>         // for QLibraryInfo, QLibraryInfo::TranslationsPath
 #include <QtCore/QLocale>              // for QLocale
 #include <QtCore/QMimeData>            // for QMimeData
 #include <QtCore/QProcess>             // for QProcess, QProcess::NotRunning
 #include <QtCore/QRegExp>              // for QRegExp
 #include <QtCore/QSettings>            // for QSettings
+#include <QtCore/QString>              // for QString
+#include <QtCore/QStringList>          // for QStringList
 #include <QtCore/QTemporaryFile>       // for QTemporaryFile
 #include <QtCore/QTime>                // for QTime
 #include <QtCore/QUrl>                 // for QUrl
@@ -39,7 +42,6 @@
 #include <QtCore/QtGlobal>             // for foreach
 #include <QtGui/QCursor>               // for QCursor
 #include <QtGui/QDesktopServices>      // for QDesktopServices
-#include <QtGui/QIcon>                 // for QIcon
 #include <QtGui/QImage>                // for QImage
 #include <QtWidgets/QApplication>      // for QApplication, qApp
 #include <QtWidgets/QCheckBox>         // for QCheckBox
@@ -219,12 +221,6 @@ MainWindow::MainWindow(QWidget* parent): QMainWindow(parent)
 
   ui_.outputWindow->setReadOnly(true);
 
-#ifdef QTTRANSLATIONDIR
-  langPath_ = QTTRANSLATIONDIR;
-#else
-  langPath_ = QApplication::applicationDirPath() + "/translations";
-#endif
-
   // Start up in the current system language.
   loadLanguage(QLocale::system().name());
   loadFormats();
@@ -314,9 +310,22 @@ void MainWindow::switchTranslator(QTranslator& translator, const QString& filena
   // remove the old translator
   qApp->removeTranslator(&translator);
 
-  // load the new translator
-  if (translator.load(filename, langPath_)) {
-    qApp->installTranslator(&translator);
+  // Set a list of directories to search for the translation file.
+  const QStringList directories = {
+#ifdef PKGDATADIR
+    PKGDATADIR "/translations",
+#else
+    QApplication::applicationDirPath() + "/translations",
+#endif
+    QLibraryInfo::location(QLibraryInfo::TranslationsPath)
+  };
+
+  // Load the new translator.
+  for (const auto& directory : directories) {
+    if (translator.load(filename, directory)) {
+      qApp->installTranslator(&translator);
+      break;
+    }
   }
 }
 
diff --git a/gui/mainwindow.h b/gui/mainwindow.h
index 3fd107fbf..b6de39944 100644
--- a/gui/mainwindow.h
+++ b/gui/mainwindow.h
@@ -70,7 +70,6 @@ class MainWindow: public QMainWindow
   QTranslator     translatorCore_; // translation for the core application.
   QTranslator     translatorQt_;   // translations for Qt.
   QString         currLang_;       // currently loaded language.
-  QString         langPath_;       // Absolute path of language files.
 
 private:
   void loadFormats();

From 203f13c6b222ab4f283d5335fa7255e8c8692824 Mon Sep 17 00:00:00 2001
From: Chris Mayo <aklhfex@gmail.com>
Date: Sun, 11 Aug 2019 19:35:00 +0100
Subject: [PATCH 4/4] Support make install for GUI on Linux systems

---
 gui/app.pro | 128 +++++++++++++++++++++++++++++++---------------------
 1 file changed, 76 insertions(+), 52 deletions(-)

diff --git a/gui/app.pro b/gui/app.pro
index 9024e16eb..5305124a0 100755
--- a/gui/app.pro
+++ b/gui/app.pro
@@ -33,58 +33,6 @@ unix {
         DEFINES += HAVE_UDEV
         PKGCONFIG += libudev
     }
-
-    # Setting PKGDATADIR will:
-    # 1. Look for gmapbase.html in PKGDATADIR instead
-    # of in QApplication::applicationDirPath().
-    # E.g. qmake PKGDATADIR=/usr/share/gpsbabel
-    # will use /usr/share/gpsbabel/gmapbase.html instead of
-    # QApplication::applicationDirPath() + "/gmapbase.html".
-    # 2. Substitude PKGDATADIR/translations in the search path for
-    # translation files instead of
-    # QApplication::applicationDirPath() + "/translations".
-    # E.g. qmake PKGDATADIR=/usr/share/gpsbabel
-    # will look in /usr/share/gpsbabel/translations instead of
-    # QApplication::applicationDirPath() + "/translations".
-
-    # We search for translation files (*.qm) in this order:
-    # 1a. Relative to the executable, specifically at
-    # QApplication::applicationDirPath() + "/translations".
-    # This works when we package the app on windows and macos.
-    # It also works we create a bundled app on linux,
-    # for example with the package target.  However, linux packagers typically
-    # install the translation files in another location.
-    #  OR
-    # 1b. In PKGDATADIR/translations.  This works for linux packages that
-    # place the translations in PKGDATADIR/translations, e.g.
-    # qmake PKGDATADIR=/usr/share/gpsbabel with the translations in
-    # /usr/share/gpsbabel/translations.
-    # 2. In the Qt TranslationsPath.  If this is not overridden in qt.conf it
-    # will point to the hard-coded paths that are compiled into the Qt library.
-    # This hard-coded path can be found with "qmake -query QT_INSTALL_TRANSLATIONS".
-    # This works for linux packages that have some or all translation files
-    # installed in the original location they used when compiling Qt.
-
-    # There are three sets of translation files that should be available
-    # when running gpsbabelfe:
-    # 1. gpsbabelfe_*.qm
-    # 2. gpsbabel_*.qm
-    # 3a. The Qt supplied meta catalogs (qt_*.qm) and the module files they
-    #     refer to (qt*_*.qm).
-    #     Note if you are counting on finding the Qt supplied translations,
-    #     then the package that provides the Qt translations
-    #     needs to be a prerequisite to the gpsbabel gui package.
-    #  OR
-    # 3b. The concatentated translation files for the modules that gpsbabelfe
-    #     uses.  These files are created by building the package target.
-    #     These are named identically to the Qt translation meta catalogs, i.e.
-    #     qt_*.qm, but contain the necessary translation data for the modules
-    #     gpsbabelfe uses.
-    # A description of the meta catalogs and concatentation process is
-    # available at
-    # https://doc.qt.io/qt-5/linguist-programmers.html#deploying-translations
-
-    !isEmpty(PKGDATADIR):DEFINES += PKGDATADIR=\\\"$$PKGDATADIR\\\"
 }
 
 UI_DIR = tmp
@@ -189,3 +137,79 @@ macx|linux{
   QMAKE_DISTCLEAN += compile_commands.json
 }
 
+linux:!isEmpty(PREFIX) {
+  DATADIR = $$PREFIX/share
+  ICONSDIR = $$DATADIR/pixmaps
+  PKGDATADIR = $$DATADIR/gpsbabel
+
+  target.path = $$PREFIX/bin
+
+  desktop.path = $$DATADIR/applications
+  desktop.files = gpsbabel.desktop
+
+  icon.path = $$ICONSDIR
+  icon.extra = $(INSTALL_FILE) images/appicon.png $(INSTALL_ROOT)$$ICONSDIR/gpsbabel.png
+
+  gmapbase.files = gmapbase.html
+  gmapbase.path = $$PKGDATADIR
+
+  translations.files = gpsbabelfe_*.qm
+  translations.files += coretool/gpsbabel_*.qm
+  translations.path = $$PKGDATADIR/translations
+
+  INSTALLS += target desktop icon gmapbase translations
+}
+
+unix {
+    # Setting PKGDATADIR will:
+    # 1. Look for gmapbase.html in PKGDATADIR instead
+    # of in QApplication::applicationDirPath().
+    # E.g. qmake PKGDATADIR=/usr/share/gpsbabel
+    # will use /usr/share/gpsbabel/gmapbase.html instead of
+    # QApplication::applicationDirPath() + "/gmapbase.html".
+    # 2. Substitude PKGDATADIR/translations in the search path for
+    # translation files instead of
+    # QApplication::applicationDirPath() + "/translations".
+    # E.g. qmake PKGDATADIR=/usr/share/gpsbabel
+    # will look in /usr/share/gpsbabel/translations instead of
+    # QApplication::applicationDirPath() + "/translations".
+
+    # We search for translation files (*.qm) in this order:
+    # 1a. Relative to the executable, specifically at
+    # QApplication::applicationDirPath() + "/translations".
+    # This works when we package the app on windows and macos.
+    # It also works we create a bundled app on linux,
+    # for example with the package target.  However, linux packagers typically
+    # install the translation files in another location.
+    #  OR
+    # 1b. In PKGDATADIR/translations.  This works for linux packages that
+    # place the translations in PKGDATADIR/translations, e.g.
+    # qmake PKGDATADIR=/usr/share/gpsbabel with the translations in
+    # /usr/share/gpsbabel/translations.
+    # 2. In the Qt TranslationsPath.  If this is not overridden in qt.conf it
+    # will point to the hard-coded paths that are compiled into the Qt library.
+    # This hard-coded path can be found with "qmake -query QT_INSTALL_TRANSLATIONS".
+    # This works for linux packages that have some or all translation files
+    # installed in the original location they used when compiling Qt.
+
+    # There are three sets of translation files that should be available
+    # when running gpsbabelfe:
+    # 1. gpsbabelfe_*.qm
+    # 2. gpsbabel_*.qm
+    # 3a. The Qt supplied meta catalogs (qt_*.qm) and the module files they
+    #     refer to (qt*_*.qm).
+    #     Note if you are counting on finding the Qt supplied translations,
+    #     then the package that provides the Qt translations
+    #     needs to be a prerequisite to the gpsbabel gui package.
+    #  OR
+    # 3b. The concatentated translation files for the modules that gpsbabelfe
+    #     uses.  These files are created by building the package target.
+    #     These are named identically to the Qt translation meta catalogs, i.e.
+    #     qt_*.qm, but contain the necessary translation data for the modules
+    #     gpsbabelfe uses.
+    # A description of the meta catalogs and concatentation process is
+    # available at
+    # https://doc.qt.io/qt-5/linguist-programmers.html#deploying-translations
+
+    !isEmpty(PKGDATADIR):DEFINES += PKGDATADIR=\\\"$$PKGDATADIR\\\"
+}
