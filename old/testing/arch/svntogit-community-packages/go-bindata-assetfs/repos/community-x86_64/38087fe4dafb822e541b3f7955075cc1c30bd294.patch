From b1a95d801a866b44a1c4ec60c2abaeb77ae54a87 Mon Sep 17 00:00:00 2001
From: Mark Wallsgrove <mw@talis.com>
Date: Sat, 2 Jan 2016 13:33:47 +0000
Subject: [PATCH] Parse the output location for bindatafile

---
 go-bindata-assetfs/main.go | 57 ++++++++++++++++++++++++++------------
 1 file changed, 40 insertions(+), 17 deletions(-)

diff --git a/go-bindata-assetfs/main.go b/go-bindata-assetfs/main.go
index 2d65094..0c7f42c 100644
--- a/go-bindata-assetfs/main.go
+++ b/go-bindata-assetfs/main.go
@@ -5,13 +5,12 @@ import (
 	"bytes"
 	"flag"
 	"fmt"
+	"io/ioutil"
 	"os"
 	"os/exec"
 	"strings"
 )
 
-const bindatafile = "bindata.go"
-
 func isDebug(args []string) bool {
 	flagset := flag.NewFlagSet("", flag.ContinueOnError)
 	debug := flagset.Bool("debug", false, "")
@@ -28,29 +27,53 @@ func isDebug(args []string) bool {
 	return *debug
 }
 
+func getBinDataFile() (*os.File, *os.File, []string, error) {
+	bindataArgs := make([]string, 0)
+	outputLoc := "bindata.go"
+
+	for i := 1; i < len(os.Args); i++ {
+		if os.Args[i] == "-o" {
+			outputLoc = os.Args[i+1]
+			i++
+		} else {
+			bindataArgs = append(bindataArgs, os.Args[i])
+		}
+	}
+
+	tempFile, err := ioutil.TempFile(os.TempDir(), "")
+	if err != nil {
+		return &os.File{}, &os.File{}, nil, err
+	}
+
+	outputFile, err := os.Create(outputLoc)
+	if err != nil {
+		return &os.File{}, &os.File{}, nil, err
+	}
+
+	bindataArgs = append([]string{"-o", tempFile.Name()}, bindataArgs...)
+	return outputFile, tempFile, bindataArgs, nil
+}
+
 func main() {
-	if _, err := exec.LookPath("go-bindata"); err != nil {
+	path, err := exec.LookPath("go-bindata")
+	if err != nil {
 		fmt.Println("Cannot find go-bindata executable in path")
 		fmt.Println("Maybe you need: go get github.com/elazarl/go-bindata-assetfs/...")
 		os.Exit(1)
 	}
-	cmd := exec.Command("go-bindata", os.Args[1:]...)
+	out, in, args, err := getBinDataFile()
+	if err != nil {
+		fmt.Fprintln(os.Stderr, "Error: cannot create temporary file", err)
+		os.Exit(1)
+	}
+	cmd := exec.Command(path, args...)
 	cmd.Stdin = os.Stdin
 	cmd.Stdout = os.Stdout
 	cmd.Stderr = os.Stderr
 	if err := cmd.Run(); err != nil {
+		fmt.Fprintln(os.Stderr, "Error: go-bindata: ", err)
 		os.Exit(1)
 	}
-	in, err := os.Open(bindatafile)
-	if err != nil {
-		fmt.Fprintln(os.Stderr, "Cannot read", bindatafile, err)
-		return
-	}
-	out, err := os.Create("bindata_assetfs.go")
-	if err != nil {
-		fmt.Fprintln(os.Stderr, "Cannot write 'bindata_assetfs.go'", err)
-		return
-	}
 	debug := isDebug(os.Args[1:])
 	r := bufio.NewReader(in)
 	done := false
@@ -59,7 +82,7 @@ func main() {
 			line = append(line, '\n')
 		}
 		if _, err := out.Write(line); err != nil {
-			fmt.Fprintln(os.Stderr, "Cannot write to 'bindata_assetfs.go'", err)
+			fmt.Fprintln(os.Stderr, "Cannot write to ", out.Name(), err)
 			return
 		}
 		if !done && !isPrefix && bytes.HasPrefix(line, []byte("import (")) {
@@ -91,7 +114,7 @@ func assetFS() *assetfs.AssetFS {
 	// Close files BEFORE remove calls (don't use defer).
 	in.Close()
 	out.Close()
-	if err := os.Remove(bindatafile); err != nil {
-		fmt.Fprintln(os.Stderr, "Cannot remove", bindatafile, err)
+	if err := os.Remove(in.Name()); err != nil {
+		fmt.Fprintln(os.Stderr, "Cannot remove", in.Name(), err)
 	}
 }
